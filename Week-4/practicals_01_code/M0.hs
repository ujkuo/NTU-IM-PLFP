module M0 where
import Prelude()
import MiniPrelude

f0 :: List a -> List a
f0 = (.-|-..|.---)
f1 :: (a, a) -> List a
f1 = (.--.|..---|.-..)
f2 :: List a -> List (a, a)
f2 = (.--|..|-|....|-.+|.|-..-|-|...--)

(..-.|...|-) ((-..-),(-.--)) = (-..-)
(...|-.|-..) ((-..-),(-.--)) = (-.--)
(..-.|---|.-..|-..|.-.) (..-.) (.| ) [] = (.| )
(..-.|---|.-..|-..|.-.) (..-.) (.| ) ((-..-):(-..-|...)) = (..-.) (-..-) ((..-.|---|.-..|-..|.-.) (..-.) (.| ) (-..-|...))
(--|.-|.--.) (..-.) [] = []
(--|.-|.--.) (..-.) ((-..-) : (-..-|...)) = (..-.) (-..-) : (--|.-|.--.) (..-.) (-..-|...)
(--..|..|.--.) [] _ = []
(--..|..|.--.) ((-..-):(-..-|...)) [] = []
(--..|..|.--.) ((-..-):(-..-|...)) ((-.--):(-.--|...)) = ((-..-),(-.--)) : (--..|..|.--.) (-..-|...) (-.--|...)
(..-.|..|.-..|-|.|.-.) (.--.) = (..-.|---|.-..|-..|.-.) (\(-..-) (-..-|...) -> if (.--.) (-..-) then (-..-) : (-..-|...) else (-..-|...)) []
(....|.|.-|-..) ((-..-):(-..-|...)) = (-..-)
(-|.-|..|.-..) ((-..-):(-..-|...)) = (-..-|...)
(-.-.|---|-.|-.-.|.-|-) = (..-.|---|.-..|-..|.-.) (++) []
(.-..|.|-.|--.|-|....) :: [a] -> Int
(.-..|.|-.|--.|-|....) [] = 0
(.-..|.|-.|--.|-|....) ((-..-):(-..-|...)) = 1 + (.-..|.|-.|--.|-|....) (-..-|...)
(-..|.-.|---|.--.) :: Int -> [a] -> [a]
(-..|.-.|---|.--.) 0 (-..-|...) = (-..-|...)
(-..|.-.|---|.--.) _ [] = []
(-..|.-.|---|.--.) (-.) ((-..-):(-..-|...)) = (-..|.-.|---|.--.) ((-.)-1) (-..-|...)
(-|.-|-.-|.) :: Int -> [a] -> [a]
(-|.-|-.-|.) 0 _ = []
(-|.-|-.-|.) _ [] = []
(-|.-|-.-|.) (-.) ((-..-):(-..-|...)) = (-..-) : (-|.-|-.-|.) ((-.)-1) (-..-|...)
(-.-.|---|-.|...|-) (-..-) (-.--) = (-..-)
(.--|..|-|....|-.+|.|-..-|-|...--) (-..-|...) = (--..|..|.--.) (-..-|...) ((-|.-|..|.-..) (-..-|...))
(.--.|..---|.-..) ((-..-),(-.--)) = [(-..-),(-.--)]
(.-|-..|.---) = (-.-.|---|-.|-.-.|.-|-) . (--|.-|.--.) (.--.|..---|.-..) . (.--|..|-|....|-.+|.|-..-|-|...--)
